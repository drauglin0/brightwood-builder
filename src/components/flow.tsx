import "reactflow/dist/base.css";
import { useCallback, useRef, useState } from "react";
import ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, BackgroundVariant, type Connection, type Edge, ReactFlowProvider, type ReactFlowInstance, type Node } from "reactflow";
import Toolbar from "./toolbar";
import ActionNode from "./nodes/action-node";
import SkipNode from "./nodes/skip-node";
import RedirectNode from "./nodes/redirect-node";
import FinishNode from "./nodes/finish-node";

const nodeTypes = {
  action: ActionNode,
  skip: SkipNode,
  redirect: RedirectNode,
  finish: FinishNode
};

const initialNodes = [
  {
    id: "1",
    type: "action",
    position: { x: 50, y: 50 },
    data: {
      id: 1,
      type: "action",
      label: "–ù–∞—á–∞–ª–æ",
      text: [
        "–¢—ã –≥—É–ª—è–µ—à—å —Å –≠–º–∏–ª–∏ –∏ –†–æ–±–µ—Ä—Ç–æ–º. –í–Ω–µ–∑–∞–ø–Ω–æ –†–æ–±–µ—Ä—Ç –≥–æ–≤–æ—Ä–∏—Ç:",
        "‚Äî –î–∞–ª—å—à–µ –Ω–µ –ø–æ–π–¥–µ–º."
      ],
      actions: [
        { id: 3, label: "–ü–æ—á–µ–º—É?" }
      ]
    }
  },
  {
    id: "2",
    type: "action",
    position: { x: 650, y: 50 },
    data: {
      id: 2,
      type: "action",
      label: "–ú–∞–º–∞ –∏—Å—á–µ–∑–ª–∞",
      text: "–¢—ã –ø—Ä–∏—à{–µ–ª|–ª–∞} –¥–æ–º–æ–π. –ò—Å—á–µ–∑–ª–∞ —Ç–≤–æ—è –º–∞–º–∞.",
      actions: [
        { id: 5, label: "–ü–æ–π—Ç–∏ –≤ –ø–æ–ª–∏—Ü–∏—é" },
        { id: 6, label: "–ü–æ–π—Ç–∏ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å" }
      ]
    }
  },
  {
    id: "3",
    type: "action",
    position: { x: 350, y: 50 },
    data: {
      id: 3,
      type: "action",
      label: "–¢–∞–º —Ç–∞–π–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å",
      text: [
        "–†–æ–±–µ—Ä—Ç:",
        "‚Äî –¢–∞–º —Ç–∞–π–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å. –¢–∞–º –∏—Å—á–µ–∑–∞—é—Ç –ª—é–¥–∏."
      ],
      actions: [
        { id: 2, label: "–ü–æ–π—Ç–∏ –¥–æ–º–æ–π" },
        { id: 6, label: "–ü–æ–π–¥–µ–º —Ç—É–¥–∞!" }
      ]
    }
  },
  {
    id: "5",
    type: "action",
    position: { x: 950, y: 50 },
    data: {
      id: 5,
      type: "action",
      label: "–õ—É—á—à–µ –Ω–µ –∏–¥—Ç–∏",
      text: "‚Äî –õ—É—á—à–µ –Ω–µ –∏–¥—Ç–∏, ‚Äî –≥–æ–≤–æ—Ä–∏—Ç –†–æ–±–µ—Ä—Ç.",
      actions: [
        { id: 9, label: "–í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–π—Ç–∏" },
        { id: 10, label: "–ù–µ –∏–¥—Ç–∏!" }
      ]
    }
  },
  {
    id: "6",
    type: "action",
    position: { x: 950, y: 250 },
    data: {
      id: 6,
      type: "action",
      label: "–≠–º–∏–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç",
      text: [
        "–¢—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –≠–º–∏–ª–∏ –∏ –†–æ–±–µ—Ä—Ç—É –ø–æ–π—Ç–∏ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å.",
        "–≠–º–∏–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç –∏–¥—Ç–∏."
      ],
      actions: [
        { id: 7, label: "–¢—Ä—É—Å–∏—Ö–∞!" },
        { id: 8, label: "–ü—É—Å—Ç—å –Ω–µ –∏–¥–µ—Ç" }
      ]
    }
  },
  {
    id: "7",
    type: "skip",
    position: { x: 1250, y: 335 },
    data: {
      id: 7,
      type: "skip",
      label: "–≠–º–∏–ª–∏ –∏–¥–µ—Ç",
      nextId: 10,
      text: "–≠–º–∏–ª–∏ –≤—Å–µ-—Ç–∞–∫–∏ —Ä–µ—à–∞–µ—Ç –∏–¥—Ç–∏ —Å –≤–∞–º–∏."
    }
  },
  {
    id: "8",
    type: "skip",
    position: { x: 1250, y: 500 },
    data: {
      id: 8,
      type: "skip",
      label: "–ò–¥–µ—Ç–µ —Å –†–æ–±–µ—Ä—Ç–æ–º",
      nextId: 11,
      text: "–í—ã —Å –†–æ–±–µ—Ä—Ç–æ–º –∏–¥–µ—Ç–µ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å."
    }
  },
  {
    id: "9",
    type: "finish",
    position: { x: 2450, y: 300 },
    data: {
      id: 9,
      type: "finish",
      label: "–ü—Ä–æ–∏–≥—Ä—ã—à",
      text: "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª{|–∞}... üôÅ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
    }
  },
  {
    id: "10",
    type: "skip",
    position: { x: 1550, y: 250 },
    data: {
      id: 10,
      type: "skip",
      label: "–ò–¥–µ—Ç–µ –≤—Ç—Ä–æ–µ–º",
      nextId: 11,
      text: "–í—ã —Å –≠–º–∏–ª–∏ –∏ –†–æ–±–µ—Ä—Ç–æ–º –∏–¥–µ—Ç–µ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å."
    }
  },
  {
    id: "11",
    type: "action",
    position: { x: 1850, y: 400 },
    data: {
      id: 11,
      type: "action",
      label: "–ö—Ä–µ–ø–æ—Å—Ç—å",
      text: "–°–ø—É—Å—Ç—è –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –º—Ä–∞—á–Ω–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏.",
      actions: [
        { id: 12, label: "–ó–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—å" }
      ]
    }
  },
  {
    id: "12",
    type: "action",
    position: { x: 2150, y: 400 },
    data: {
      id: 12,
      type: "action",
      label: "–î—Ä–∞–∫–æ–Ω",
      text: [
        "–í—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä—å –∫—Ä–µ–ø–æ—Å—Ç–∏, –ø–æ–≤—Å—é–¥—É —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –∫–æ—Å—Ç–∏, –≤–∏–¥–∏–º–æ, —ç—Ç–æ –≤—Å–µ, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç –ø—Ä–æ–ø–∞–≤—à–∏—Ö –ª—é–¥–µ–π. üò•",
        "–í–¥—Ä—É–≥ –≤—ã –≤–∏–¥–∏—Ç–µ –æ–≥—Ä–æ–º–Ω–æ–≥–æ... <b>–î–†–ê–ö–û–ù–ê</b>!!! üêâ",
        "–û–Ω —É–≤–∏–¥–µ–ª –≤–∞—Å –∏ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞–ø–∞—Å—Ç—å! üî•"
      ],
      actions: [
        { "id": 13, "label": "–ë–µ–∂–∞—Ç—å" },
        { "id": 9, "label": "–£–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è" }
      ]
    }
  },
  {
    id: "13",
    type: "action",
    position: { x: 2450, y: 700 },
    data: {
      id: 13,
      type: "action",
      label: "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞",
      text: [
        "–í—ã –ø—Ä–∏–±–µ–∂–∞–ª–∏ –≤ –¥—Ä—É–≥—É—é –∫–æ–º–Ω–∞—Ç—É. –¢–∞–º —Ü–µ–ª—ã–π –∫–ª–∞–¥! üëë",
        "–í–æ–∫—Ä—É–≥ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏, –¥–æ—Å–ø–µ—Ö–∏ –∏ –æ—Ä—É–∂–∏–µ.",
        "–ò–∑ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ –≤—ã—Ö–æ–¥–∞ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–∞–¥.",
        "–ü—Ä–µ–∂–¥–µ, —á–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥..."
      ],
      actions: [
        { id: 19, label: "–ù–∞–±—Ä–∞—Ç—å –∑–æ–ª–æ—Ç–∞" },
        { id: 14, label: "–í–∑—è—Ç—å –º–µ—á–∏ –ø–æ–ª—É—á—à–µ" }
      ]
    }
  },
];

const initialEdges = [
  { id: "e1-3", source: "1", sourceHandle: "3", target: "3" },
  { id: "e3-2", source: "3", sourceHandle: "2", target: "2" },
  { id: "e2-5", source: "2", sourceHandle: "5", target: "5" },
  { id: "e2-6", source: "2", sourceHandle: "6", target: "6" },
  { id: "e3-6", source: "3", sourceHandle: "6", target: "6" },
  { id: "e5-9", source: "5", sourceHandle: "9", target: "9" },
  { id: "e5-10", source: "5", sourceHandle: "10", target: "10" },
  { id: "e6-7", source: "6", sourceHandle: "7", target: "7" },
  { id: "e6-8", source: "6", sourceHandle: "8", target: "8" },
  { id: "e7-10", source: "7", sourceHandle: "10", target: "10" },
  { id: "e8-11", source: "8", sourceHandle: "11", target: "11" },
  { id: "e10-11", source: "10", sourceHandle: "11", target: "11" },
  { id: "e11-12", source: "11", sourceHandle: "12", target: "12" },
  { id: "e12-9", source: "12", sourceHandle: "9", target: "9" },
  { id: "e12-13", source: "12", sourceHandle: "13", target: "13" },
];

let maxNodeId = Math.max(...initialNodes.map(n => n.data.id));
const getNextId = () => String(++maxNodeId);

export default function Flow() {
  const reactFlowWrapper = useRef<HTMLDivElement>(null);
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  const onDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const onDrop = useCallback(
    (event: React.DragEvent<HTMLDivElement>) => {
      event.preventDefault();

      if (!reactFlowWrapper?.current || !reactFlowInstance) {
        return;
      }

      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();
      const type = event.dataTransfer.getData('application/reactflow');

      // check if the dropped element is valid
      if (typeof type === 'undefined' || !type) {
        return;
      }

      const position = reactFlowInstance.project({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      const nodeId = getNextId();

      const newNode: Node = {
        id: nodeId,
        type,
        position,
        data: { id: Number(nodeId), type, text: "Some text" }
      };

      setNodes(nodes => nodes.concat(newNode));
    },
    [reactFlowInstance]
  );

  return (
    <div className="h-screen w-screen flex flex-row flex-grow">
      <ReactFlowProvider>
        <Toolbar />
        <div className="flex-grow w-full" ref={reactFlowWrapper}>
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onInit={setReactFlowInstance}
            onDrop={onDrop}
            onDragOver={onDragOver}
            deleteKeyCode={"Delete"}
            className="bg-gray-100"
            nodeTypes={nodeTypes}
            fitView
          >
            <Controls />
            <MiniMap zoomable pannable />
            <Background variant={BackgroundVariant.Dots} gap={12} size={1} />
          </ReactFlow>
        </div>
      </ReactFlowProvider>
    </div>
  );
}
